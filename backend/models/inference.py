import io
import os
import torch
import numpy as np
from PIL import Image
import torchxrayvision as xrv
from models.xray_model import get_device,load_model,get_preprocess,get_last_conv_layer
from skimage import exposure
import logging

logger = logging.getLogger(__name__)

def predict(image_bytes, model, labels, preprocess, target_layer, device=None):
    """
    Predict disease probabilities from chest X-ray image.
    
    Args:
        image_bytes: Raw image bytes
        model: Loaded PyTorch model
        labels: List of disease labels
        preprocess: Preprocessing function
        target_layer: Target layer for Grad-CAM
        device: Device to run on
    
    Returns:
        dict: Predictions and metadata
    """
    logger.info("predicting diseases based on xray")
    device = device or get_device()
    
    logger.info("preprocessing image")
    
    # Step 1: Load and preprocess image
    pil_img = Image.open(io.BytesIO(image_bytes))
    original_size = pil_img.size  # (width, height)
    tensor_img = preprocess(pil_img).to(device)
    
    logger.info("sending the processed image to model for processing")

    # Step 2: Inference
    with torch.no_grad():
        outputs = model(tensor_img)
        probs = torch.sigmoid(outputs).cpu().numpy()[0]
        
    logger.info("prediction generated by model")

    # Sort predictions by probability (descending)
    sorted_indices = np.argsort(probs)[::-1]
    predictions = [{"label": labels[i], "prob": float(probs[i])}
                   for i in sorted_indices]
    
    top_idx = sorted_indices[0]
    top_label = labels[top_idx]
    logger.info("predictions sorted and sending results")

    return {
        "predictions": predictions,
        "top_label": top_label,
        "top_probability": float(probs[top_idx]),
        "top_class_index": int(top_idx),
        "original_size": original_size,
    }


if __name__ == "__main__":
    device = get_device()
    print("Device:", device)

    model, labels = load_model(device)
    preprocess = get_preprocess()
    target_layer = get_last_conv_layer(model)
    
    print("Target layer:", target_layer)
    print("Labels:", labels[:5], "...")  # Show first 5 labels
    print("Total labels:", len(labels))

    # Test with sample image
    try:
        with open("image.png", "rb") as f:
            image_bytes = f.read()

        print("\npredicting diaseas for xray image...")
        pred_results = predict(image_bytes, model, labels, preprocess, target_layer, device=device)
        
        print(f"Original image size: {pred_results['original_size']}")
        print(f"Top prediction: {pred_results['top_label']} ({pred_results['top_probability']:.3f})")
        
        print(f"\nTop 5 predictions:")
        for i, pred in enumerate(pred_results["predictions"][:5]):
            print(f"{i+1}. {pred['label']}: {pred['prob']:.3f}")

        # print("\n Generating Heatmap...")
        # heatmap_results = generate_heatmap(
        #     image_bytes, 
        #     model, 
        #     target_layer, 
        #     pred_results["top_class_index"],
        #     device,
        #     pred_results["original_size"]
        # )
        
        # if heatmap_results["success"]:
        #     print(f"Heatmap generated successfully!")
        #     print(f"Output size: {heatmap_results['original_size']}")
        #     print(f"Model input size: {heatmap_results['model_input_size']}")
            
        #     # Save heatmap
        #     heatmap_results["heatmap_overlay"].save("output/heatmap.png")
        #     print("Heatmap saved as 'test_heatmap.png'")
        # else:
        #     print(f"Heatmap generation failed: {heatmap_results['error']}")

        # print("\n=== Testing Combined Function ===")
        # combined_results = predict_and_explain(
        #     image_bytes, model, labels, preprocess, target_layer, 
        #     device=device, save_heatmap=True, heatmap_dir="output"
        # )
        
        # print(f"Combined results generated successfully!")
        # print(f"Predictions: {len(combined_results['predictions'])} diseases")
        # print(f"Heatmap success: {combined_results['heatmap_success']}")
        # print(f"Output size: {combined_results['output_size']}")
        # if combined_results['heatmap_path']:
        #     print(f"Heatmap saved to: {combined_results['heatmap_path']}")
            
    except FileNotFoundError:
        print("No test image found (image.png). Please add a test image to run the demo.")
    except Exception as e:
        print(f"Error during testing: {e}")
        import traceback
        traceback.print_exc()